# GraphQL schema example
#
# https://gqlgen.com/getting-started/

"""
A RFC3339 timestamp (e.g. "2006-01-02T15:04:05.999999999Z07:00").
"""
scalar Time

"""Users need to be authenticated to access this item."""
directive @authenticated on FIELD_DEFINITION

"""Information about a page in a paginated query."""
type PageInfo {
  """Are there any more pages?"""
  hasNextPage: Boolean!
  """How many items were in this page?"""
  length: Int!
  """
  A cursor that can be passed as an "after" parameter to read the next page.
  """
  endCursor: ID
}

"""Properties shared by all items stored in the database."""
interface Node {
  """A unique ID for this item."""
  id: ID!
  """When the item was created."""
  createdAt: Time!
  """When the item was last updated."""
  updatedAt: Time!
}

"""
A stream to monitor and extract transmissions from.
"""
type Stream implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!

  """The human-friendly name for this stream."""
  displayName: String!

  """
  Where the stream can be downloaded from.

  This is typically a URL, but can technically be anything ffmpeg allows as an
  input.
  """
  url: String!

  """
  Iterate over the raw chunks of audio downloaded for this stream.
  """
  chunks(after: ID, createdAfter: Time, count: Int! = 30): ChunksConnection!

  """
  Iterate over the radio messages detected in the stream.
  """
  transmissions(after: ID, createdAfter: Time, count: Int! = 30): TransmissionsConnection!
}

type ChunksConnection {
  edges: [Chunk!]
  pageInfo: PageInfo!
}

type Chunk implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!

  """When the chunk was first broadcast."""
  timestamp: Time!
  """A SHA-256 checksum of the chunk's audio file."""
  sha256: String!
  """Where the chunk's audio file can be downloaded from."""
  downloadUrl: String

  """
  Iterate over the radio messages detected in the chunk.
  """
  transmissions(after: ID, createdAfter: Time, count: Int! = 30): TransmissionsConnection!
  """
  The stream this chunk belongs to.
  """
  stream: Stream!
}

type TransmissionsConnection {
  edges: [Transmission!]
  pageInfo: PageInfo!
}

"""
A radio transmission.
"""
type Transmission implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!

  """When the transmission was first broadcast."""
  timestamp: Time!
  """How long is the transmission, in seconds?"""
  length: Float!
  """A SHA-256 checksum of the chunk's audio file."""
  sha256: String!
  """Where the chunk's audio file can be downloaded from."""
  downloadUrl: String
  transcription: Transcription
  """
  The chunk this transmission belongs to.
  """
  chunk: Chunk!
}

type Transcription implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  content: String!

  """
  The transmission this transcription belongs to.
  """
  transmission: Transmission!
}

type StreamsConnection {
  edges: [Stream!]
  pageInfo: PageInfo!
}

type Query {
  """Iterate over all active streams."""
  getStreams(after: ID, createdAfter: Time, count: Int! = 10): StreamsConnection!
  """Look up a stream by its ID."""
  getStreamById(id: ID!): Stream
  """Look up a chunk by its ID."""
  getChunkById(id: ID!): Chunk
  """Look up a transmission by its ID."""
  getTransmissionById(id: ID!): Transmission
}

input RegisterStreamVariables {
  displayName: String!
  url: String!
}

type Mutation {
  """Register a new stream."""
  registerStream(input: RegisterStreamVariables!): Stream! @authenticated
  """Remove a stream."""
  removeStream(id: ID!): Stream! @authenticated
}

type Subscription {
  """Get chunks as they are recorded."""
  chunk: Chunk!
  """Get transmissions as they are detected."""
  transmission: Transmission!
  """Get transcriptions as transmissions are processed with speech-to-text."""
  transcription: Transcription!
}
